DELIMITER &&  
CREATE PROCEDURE procedure_name [[IN | OUT | INOUT] parameter_name datatype [, parameter datatype]) ]    
BEGIN    
    Declaration_section    
    Executable_section    
END &&  
DELIMITER ;   

+++++++++++++++++++++++++
mysql> create table user(id int(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,name varchar(100))&&
Query OK, 0 rows affected, 1 warning (0.09 sec)

mysql> desc user;
    -> &&
+-------+--------------+------+-----+---------+----------------+
| Field | Type         | Null | Key | Default | Extra          |
+-------+--------------+------+-----+---------+----------------+
| id    | int          | NO   | PRI | NULL    | auto_increment |
| name  | varchar(100) | YES  |     | NULL    |                |
+-------+--------------+------+-----+---------+----------------+
2 rows in set (0.01 sec)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
insert into user(id,name) values(10,'Yakub'),(11,'ksv'),(12,'aryan');


mysql> insert into user(id,name) values(10,'Yakub'),(11,'ksv'),(12,'aryan')&&
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0




Pick a Delimiter
------------------

The delimiter is the character or string of characters which is used to complete an SQL statement. By default we use semicolon (;) as a delimiter. But this causes problem in stored procedure because a procedure can have many statements, and everyone must end with a semicolon. So for your delimiter, pick a string which is rarely occur within statement or within procedure. Here we have used double dollar sign i.e. $$.You can use whatever you want. To resume using ";" as a delimiter later, say "DELIMITER ; $$". See here how to change the delimiter :


mysql> DELIMITER $$ ;


Creating MySQL STORED PROCEDURES
++++++++++++++++++++++++++++++++++

In this section, letâ€™s see the different ways by which we can CREATE MySQL STORED PROCEDURES.
We will learn how to create procedures without any parameters and with different types of supported parameters.

With a Simple SELECT QUERY

DELIMITER //
mysql>  create procedure getuser()
    -> begin
    -> select *from user;
    -> end//
Query OK, 0 rows affected (0.01 sec)


mysql> call getuser//
+----+-------+
| id | name  |
+----+-------+
| 10 | Yakub |
| 11 | ksv   |
| 12 | aryan |
+----+-------+
3 rows in set (0.01 sec)

Query OK, 0 rows affected (0.02 sec)

+++++++++++++++++++++++++++++++++++++++++++++++
for insert values into MySql
----------------------------
mysql> Select * from student;
+------+---------+-----------+------------+
| id   | Name    | Address   | Subject    |
+------+---------+-----------+------------+
| 100  | Aarav   | Delhi     | Computers  |
| 101  | YashPal | Amritsar  | History    |
| 105  | Gaurav  | Jaipur    | Literature |
| 110  | Rahul  | Chandigarh | History    |
+------+---------+------------+------------+
4 rows in set (0.00 sec)


Mysql> DELIMITER // ;
mysql> Create PROCEDURE insert_studentinfo(IN p_id int, IN p_name varchar(20),IN p_Address Varchar(20), IN p_subject Varchar(20))
    -> BEGIN
    -> insert into student_info(id, name, address, subject) values (p_id, p_name,p_address, p_subject);
    -> END //
Query OK, 0 rows affected (0.09 sec)



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
mysql> create procedure setuser(in p_id int,in p_name varchar(40))
    -> begin
    -> insert into user(id,name) values(p_id,p_name);
    -> end//
Query OK, 0 rows affected (0.01 sec)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Mysql> call setuser(103,'ksv')//


mysql> call ksv.setuser(103,'ksv')//
Query OK, 1 row affected (0.01 sec)

mysql> call ksv.getuser//
+-----+-------+
| id  | name  |
+-----+-------+
|  10 | Yakub |
|  11 | ksv   |
|  12 | aryan |
| 103 | ksv   |
+-----+-------+
4 rows in set (0.00 sec)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Delete Operation with stored procedure
+++++++++++++++++++++++++++++++++++++++++
mysql> create procedure del_user(in p_id int)
    -> begin
    -> delete from user where id=p_id;
    -> end//
Query OK, 0 rows affected (0.01 sec)

---------------------------------------------------
mysql> call ksv.del_user(10)//
Query OK, 1 row affected (0.01 sec)

mysql> call getuser()//
+-----+-------+
| id  | name  |
+-----+-------+
|  11 | ksv   |
|  12 | aryan |
| 103 | ksv   |
+-----+-------+
3 rows in set (0.00 sec)

Query OK, 0 rows affected (0.02 sec)

+++++++++++++++++++++++++++++++++++++++++++++++++++++
Update Recored with Stored Procedure
+++++++++++++++++++++++++++++++++++++++

create procedure update_user(in p_id int, in p_name varchar(40))
begin
update user set name=p_name where id=p_id;
end//



Ex:
-----

mysql> call ksv.update_user(11,'KruthikaSriValli')//
Query OK, 1 row affected (0.01 sec)

mysql> call getuser()//
+-----+------------------+
| id  | name             |
+-----+------------------+
|  11 | KruthikaSriValli |
|  12 | aryan            |
| 103 | ksv              |
+-----+------------------+
3 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.*;
import java.util.*;
public class InsertDataProcedure {

	public static void main(String[] args) {
			try
			{
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/ksv","root","root");
				CallableStatement st=con.prepareCall("{call ksv.setuser(?,?)}");
				Scanner in=new Scanner(System.in);
				System.out.println("Enter user values");
				int p_id=in.nextInt();
				String p_name=in.next();
				st.setInt(1,p_id);
				st.setString(2, p_name);
				int x=st.executeUpdate();
				System.out.println(x+"Query Excuted.............");
				System.out.println(x);
				con.close();
			}
			catch(Exception ex)
			{
				System.out.println(ex);
			}
		}
	}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Oracle
-------
Table creation:

create table user(id number(10) primary key,name varchar2(100));  
Now write the procedure code to insert record in user table.

Procedure Code:

create or replace procedure "INSERTUSER"    
(id IN NUMBER,    
name IN VARCHAR2)    
is    
begin    
insert into user values(id,name);    
end;    
/       


Oracle program to call procedure
Let's see the code to call above created procedure.

BEGIN    
   insertuser(101,'Rahul');  
   dbms_output.put_line('record inserted successfully');    
END;    
/    
Now, see the "USER" table, you will see one record is inserted.

ID	Name
101	Rahul



